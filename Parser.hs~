--BBC headline scraper
{-# LANGUAGE Arrows, NoMonomorphismRestriction #-}
import Text.XML.HXT.Core
import Network.HTTP.Conduit
import Data.Char
import Data.List.Split
import Control.Monad
import qualified Data.ByteString.Lazy.Char8 as L

data HeadLine = HeadLine {title, link ::String} -- deriving Show

instance Show HeadLine where
    show HeadLine {title = t, link = l} = (map toUpper t) ++ ":-: " ++ l

url' = "http://www.bbc.com/news"

atTag tag = deep (isElem >>> hasName tag)
text = getChildren >>> getText

parseHeadlines headlines = map makeHeadLine $ map (splitOn ":-: ") headlines
    where makeHeadLine (x:y:[]) = HeadLine {title = x, link = y}

readHeadlinesFromFile :: IO [HeadLine]
readHeadlinesFromFile = do
    headlines <- readFile "headlines.bbc"
    let headlinesList = lines headlines
    return $ parseHeadlines headlinesList

getHeadlines = atTag "a" >>>
        proc x -> do
                linkA <- getAttrValue "href" -< x
                titleA <- text <<< atTag "span" -< x
                returnA -< HeadLine {title = titleA, link = ("http://www.bbc.com" ++ linkA)}

parseHTML = readString [withValidate no, withParseHTML yes, withWarnings no]

main = do
        url'' <- simpleHttp url'
        let url = L.unpack url''
        headlines' <- runX (parseHTML url >>> getHeadlines)
        let headlines = unlines $ map show $ reverse $ drop 39 $ reverse $ drop 18 headlines'
        writeFile "headlines.bbc" headlines
        --putStrLn headlines
